# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Wqc7LEl7BX_FE6cZam-jzkkBgOdoopR
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
# url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00360/AirQuality"
df = pd.read_csv('/content/AirQualityUCI.csv', sep=";", decimal=",", na_values=["-200"])
df.isnull().sum()
df.shape
df.columns
# Drop unnecessary columns
# df = df.drop(columns=["Unnamed: 15", "Unnamed: 16"])

# # Convert date and time columns to datetime
# df["Date"] = pd.to_datetime(df["Date"], format="%d/%m/%Y")
# df["Time"] = pd.to_timedelta(df["Time"].str.split(":").apply(lambda x: ":".join(x[:2])))

# # Combine Date and Time columns
# df["Datetime"] = df["Date"] + df["Time"]
# df = df.drop(columns=["Date", "Time"])

# # Sort the dataframe by Datetime
# df = df.sort_values(by="Datetime").reset_index(drop=True)

# # Impute missing values using mean imputation
# imputer = SimpleImputer(strategy="mean")
# df = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)

# # Standardize the numerical features
# scaler = StandardScaler()
# df[df.columns[2:]] = scaler.fit_transform(df[df.columns[2:]])

# #  #Before preprocessing
# plt.figure(figsize=(12, 6))
# plt.plot(df["Datetime"], df["CO(GT)"], label="CO(GT)")
# plt.plot(df["Datetime"], df["NOx(GT)"], label="NOx(GT)")
# plt.plot(df["Datetime"], df["NO2(GT)"], label="NO2(GT)")
# plt.xlabel("Datetime")
# plt.ylabel("Air Quality")
# plt.title("Air Quality before Preprocessing")
# plt.legend()
# plt.xticks(rotation=45)
# plt.show()

# # # # After preprocessing
# plt.figure(figsize=(12, 6))
# plt.plot(df["Datetime"], df["CO(GT)"], label="CO(GT)")
# plt.plot(df["Datetime"], df["NOx(GT)"], label="NOx(GT)")
# plt.plot(df["Datetime"], df["NO2(GT)"], label="NO2(GT)")
# plt.xlabel("Datetime")
# plt.ylabel("Air Quality")
# plt.title("Air Quality after Preprocessing")
# plt.legend()
# plt.xticks(rotation=45)
# plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/forest-fires/forestfires.csv"
df = pd.read_csv(url)
# Convert month and day columns to numerical values
month_dict = {"jan": 1, "feb": 2, "mar": 3, "apr": 4, "may": 5, "jun": 6,
              "jul": 7, "aug": 8, "sep": 9, "oct": 10, "nov": 11, "dec": 12}
df["month"] = df["month"].map(month_dict)
df["day"] = pd.Categorical(df["day"], categories=["sun", "mon", "tue", "wed", "thu", "fri", "sat"], ordered=True)
df["day"] = df["day"].cat.codes

# Separate the target variable
target = df["area"]
df = df.drop(columns=["area"])

# Log-transform the target variable
target = np.log1p(target)

# Standardize the numerical features
scaler = StandardScaler()
df[df.columns[:-2]] = scaler.fit_transform(df[df.columns[:-2]])

# Encode the target variable
target_encoder = LabelEncoder()
target = target_encoder.fit_transform(target)
# Before preprocessing
plt.figure(figsize=(12, 6))
sns.boxplot(data=df, orient="h")
plt.title("Forest Fires before Preprocessing")
plt.xlabel("Feature Value")
plt.ylabel("Features")
plt.show()

# After preprocessing
plt.figure(figsize=(12, 6))
sns.boxplot(data=df, orient="h")
plt.title("Forest Fires after Preprocessing")
plt.xlabel("Feature Value")
plt.ylabel("Features")
plt.show()